let t = trace (
    -- Polynomial that root we are interested in
    let poly  = fun poly  (x : double) : double => x * x * x + 1.0 in
    -- Derivative of a polynomial
    let poly' = fun poly' (x : double) : double => 3.0 * x * x in


    -- Newton's method.
    --   f  : function which root want to find
    --   f' : deribative of f
    --   n  : number of iterations to perform
    let newton = fun newton (f : double -> double) (f' : double -> double)
                            (n : int) : double =>
        let x = ref 0.0 in
        let i = ref 0 in
        (while !i < n do
           x := !x - (f( !x ) / f'( !x )) ;;
           i := !i + 1
        ) ;; !x in
    newton poly poly' 4 ) in
bwdSlice( t, raise "Division by zero" )
