data intlist = Nil | Cons int * intlist

let mklist = fun mklist (n : int) : intlist =>
                 if n > 0
                 then Cons(n,mklist (n-1))
                 else Nil
in
let insert = fun insert (x : int) (ys : intlist) : intlist =>
               case ys of
                 Nil -> Cons (x,Nil);
                 Cons y -> if x < (fst y)
                           then Cons(x, ys)
                           else Cons(fst y, insert x (snd y))
in
let sort = fun sort (xs : intlist) : intlist =>
   case xs of
      Nil -> Nil;
      Cons x -> insert (fst x) (sort (snd x))
in
let split = fun split (xs : intlist) : intlist * intlist =>
   case xs of
     Nil -> (Nil,Nil);
     Cons x -> let y = split (snd x) in
               (Cons(fst x, snd y), fst y)
in
let merge = fun merge (xs : intlist) (ys : intlist) : intlist =>
  case xs of
    Nil -> ys;
    Cons x -> case ys of
                Nil -> xs;
                Cons y -> if ((fst x) < (fst y))
                          then Cons(fst x,merge (snd x) ys)
                          else Cons(fst y,merge xs (snd y))
in
let length = fun length (xs : intlist) : int =>
    case xs
    of Nil -> 0;
       Cons x -> 1 + (length (snd x))
in
let mergesort = fun mergesort (xs : intlist) : intlist =>
  case xs
  of Nil -> Nil;
     Cons x -> case (snd x)
                 of Nil -> Cons(fst x,Nil);
                    Cons y -> let z = split xs in
                              merge (mergesort (fst z)) (mergesort (snd z))
in

let sum = fun sum (xs : intlist) : int =>
    case xs
    of Nil -> 0;
       Cons x -> (fst x) + (sum (snd x))
in
let l = mklist 1000 in
let t = trace(sum(l)) in
let v = read(t) in
treesize(t)