data intlist = Nil | Cons int * intlist

let split = fun split (xs : intlist) : intlist * intlist =>
   case xs of
     Nil -> (Nil,Nil);
     Cons x -> let y = split (snd x) in
               (Cons(fst x, snd y), fst y)
in
let merge = fun merge (xs : intlist) (ys : intlist) : intlist =>
  case xs of
    Nil -> ys;
    Cons x -> case ys of
                Nil -> xs;
                Cons y -> if ((fst x) < (fst y))
                          then Cons(fst x,merge (snd x) ys)
                          else Cons(fst x,merge xs (snd y))
in
let mergesort = fun mergesort (xs : intlist) : intlist =>
  case xs
  of Nil -> Nil;
     Cons x -> case (snd x)
                 of Nil -> xs;
                    Cons y -> let z = split xs in
                              merge (mergesort (fst z)) (mergesort (snd z))
in
let l = Cons(12,Cons(7,Cons(4,Cons(8,Cons(18,Cons(23,Cons(2,Cons(6,Nil)))))))) in
let t = trace(mergesort l) in
let s0 = traceSlice(t,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,_:intlist))))))))) in
let s1 = traceSlice(t,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(_:int,Cons(23,Cons(_:int,_:intlist))))))))) in
--let z = visualizeDiff("sort-bug-2-full-trace.pdf",t,s0) in
--let z = visualizeDiff("sort-bug-2-single-element.pdf",s1,s0) in
read(t)
