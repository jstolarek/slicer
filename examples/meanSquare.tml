data intlist = Nil | Cons int * intlist

let t = trace (
   let sum =
      fun sum (xs : intlist) : int =>
         case xs of
            Nil -> 0;
            Cons x -> (fst x) + (sum (snd x))
   in
   let length =
      fun length (xs : intlist) : int =>
         case xs of
            Nil -> 0;
            Cons x -> 1 + length (snd x)
   in
   let average =
      fun average (xs : intlist) : int =>
         (sum xs) / (length xs)
   in
   let map =
      fun map (f : int -> int) (xs : intlist) : intlist =>
         case xs of
            Nil -> Nil;
            Cons x -> Cons(f (fst x), map f (snd x))
   in
   let compareTo =
      fun compareTo (xs : intlist) (y : int) : intlist =>
         map (fun diff (x : int) : int => x - y) xs
   in
   let input = Cons(1, Cons(2, Cons(8, Cons(5, Nil)))) in
   let squares = map (fun sq (x : int) : int => x * x) input in
   (squares, average squares)
)
in
let p1 = (Cons(_:int, Cons(_:int, Cons(64, Cons(_:int, Nil)))), 23) in
let p2 = (Cons(_:int, Cons(_:int, Cons(64, Cons(_:int, Nil)))), _:int) in
let p3 = (Cons(1, Cons(4, Cons(64, Cons(25, Nil)))), 23) in
let s1 = traceSlice(t, p1) in
let s2 = traceSlice(t, p2) in
let s3 = traceSlice(t, p3) in
read t
