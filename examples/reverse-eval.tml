data intlist = Nil | Cons int * intlist

let mklist = fun mklist (n : int) : intlist =>
                 if (n > 0 )
                 then Cons(n,mklist (n-1))
                 else Nil
in

let append =
    fun append (xs : intlist) (ys : intlist) : intlist =>
      case xs of
        Nil -> ys;
        Cons x -> Cons(fst x, append(snd x) ys)
in
let reverse =
    fun reverse (xs : intlist) : intlist =>
      case xs of
         Nil -> Nil;
         Cons x -> append (reverse (snd x)) (Cons (fst x, Nil))
in
let fastreverse =
  fun fastreverse (xs : intlist) : intlist =>
    let r = fun r (xs : intlist) (ys : intlist) : intlist =>
              case xs of
                Nil -> ys;
                Cons x -> r (snd x) (Cons (fst x, ys))
    in r xs Nil
in
let listeq = fun listeq (xs:intlist) (ys:intlist) : bool =>
  case xs of
    Nil -> (case ys of
             Nil -> true;
             Cons y -> false);
    Cons x -> (case ys of
               Nil -> false;
               Cons y -> ((fst x) = (fst y)) && listeq (snd x) (snd y))
in
let xs = mklist 100 in
let v = fastreverse(xs) in
v